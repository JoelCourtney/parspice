package parspice.socketManager;

import parspice.sender.Sender;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

/**
 * A threadable class that listens on a socket for all responses coming
 * back from a single worker.
 *
 * It aggregates the responses into a list, which is later combined with the
 * lists generated by other workers.
 *
 * @param <O> The type deserialized by the given sender object.
 */
public class InputSocketManager<I,O> extends SocketManager<O> {
    private final Sender<I> inputSender;
    private final Sender<O> outputSender;
    private final List<I> inputs;

    public InputSocketManager(ServerSocket serverSocket, List<I> inputs, Sender<I> inputSender, Sender<O> outputSender, int workerIndex) {
        super(serverSocket, workerIndex, inputs.size());
        this.inputs = inputs;
        this.inputSender = inputSender;
        this.outputSender = outputSender;
    }

    @Override
    protected void sendAndReceive() {
        try {
            ObjectInputStream ois = getInputStream();
            ObjectOutputStream oos = getOutputStream();
            for (I input : inputs) {
                inputSender.write(input, oos);
            }
            oos.flush();
            for (int i = 0; i < inputs.size(); i++) {
                outputs.add(outputSender.read(ois));
            }
            ois.close();
            oos.close();
        } catch (IOException e) {
            System.out.println("Socket Manager " + workerIndex + " failed after " + outputs.size());
            e.printStackTrace();
        }
    }
}
