syntax = "proto3";

import "google/protobuf/empty.proto";

option java_multiple_files = true;

package parspice.rpc;

/**
One rpc for each CSPICE function.
Each takes ###Response and returns ###Request
 */
service ParSpice {
  ###SERVICES###
}

/**
Used for nested arrays of doubles.

E.g. a `double[][]` value in Java is serialized as
a `repeated RepeatedDouble` in protobuf.
 */
message RepeatedDouble {
  repeated double array = 1;
}

/**
Used for nested arrays of ints.

E.g. an `int[][]` value in Java is serialized as
a `repeated RepeatedInt` in protobuf.
 */
message RepeatedInt {
  repeated int32 array = 1;
}

/**
Two base messages for each CSPICE function are created.
All fields corresponding to function arguments are named exactly the same as the arg name in CSPICE.java

```
message <Name>Request {
    message <Name>Input {
        <all function arguments, including output pointer args.>
    }
    repeated <Name>Input inputs = 1;
}
message <Name>Response {
    message <Name>Output {
        <output pointer args.>
        <<type> ret: return value, if not void>
        <string error: error string if one is thrown>
    }
    repeated <Name>Output outputs = 1;
}
```
 */
###MESSAGES###
